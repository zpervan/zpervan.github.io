[{"content":"","date":"26 March 2023","permalink":"/tags/esp01/","section":"Tags","summary":"","title":"esp01"},{"content":"","date":"26 March 2023","permalink":"/tags/esp8266/","section":"Tags","summary":"","title":"esp8266"},{"content":"","date":"26 March 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"26 March 2023","permalink":"/tags/smart-home/","section":"Tags","summary":"","title":"smart-home"},{"content":"","date":"26 March 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"As spring is now here, it was time for a new side project. For a long period of time, I wanted to build a small weather station where the data was stored, somewhere, on my local network. The server technology decision was based on something that I have started to learn in recent times and, therefore, wanted to explore it even more.\nThe project itself is (currently) made of two parts:\nMeasuring station - Consists of a microcontroller with and integrated Wi-Fi module, and a sensor for measuring temperature and humidity data Server - Receives the microcontroller weather data and serves it to all connected clients In some point of time in the future, I plan to add some kind data visualization in the form of a desktop or web application, but for now, let’s take the first step by making the backend work properly. This post will focus on how to connect the measuring station itself and show a minimum working code example.\nYou can find the full working code example at the end of the post.\nThe hardware\u003e\rThe hardware # The measuring station consists of three major components:\nESP01 microcontroller with a built-in Wi-Fi module DHT22 temperature and humidity sensor Power supply Both, the microcontroller and sensor, work on 3.3VDC so there are multiple options to provide the needed power. I chose to use the YwRobot 545043 power supply module during the development process for two reasons:\nProvides a stable 3.3VDC with a maximum of 700mA at the output which is more than sufficient Header pins which can snug easily into any larger development board so no additional wiring is needed There are alternatives for making a power supply, like creating a voltage divider or use a voltage regulator like AMS1117 which would be a better option if we wanted to make a small PCB, but this decision is for a later stage of the project as I want to keep it simple and without any need for additional components or designs.\nConnection schema\u003e\rConnection schema # The wiring diagram is really simple, as you can see in the picture below.\nPicture 1 - Connection schema\nBesides the above-mentioned components, there is a pullup resistor which is used to have a stable signal voltage value while the ESP01 and DHT22 are exchanging data. When all components are connected together, we get the following: Picture 2 - End result\nBringing the hardware to life\u003e\rBringing the hardware to life # The proposed software solution is pretty straightforward, which means it\u0026rsquo;s all out-of-the-box solutions. First of all, make sure you have installed the Arduino IDE and added the ESP8266 package. More information on how to setup the Arduino IDE can be seen here.\nTo upload the code to the ESP01 module, I used the Open-Smart USB to ESP01 Adapter which makes the upload process super simple, and you can switch between programming and USB mode which comes handy while debugging or monitoring activities on the ESP01 via serial monitor. One caveat of the USB specified adapter is that you cannot (at least without any modification) hook up any external devices (i.e., sensor) so the debugging or monitoring process can be cumbersome.\nThere are other alternatives of uploading the code to ESP01 like with an Arduino board, but it tends to be messy and error prone, so I suggest USB adapter approach.\nLet\u0026rsquo;s connect\u003e\rLet\u0026rsquo;s connect # In order to connect to your local Wi-Fi network, the following libraries are needed:\n#include \u0026lt;ESP8266WiFi.h\u0026gt; #include \u0026lt;ESP8266WiFiMulti.h\u0026gt; #include \u0026lt;ESP8266HTTPClient.h\u0026gt; Those libraries will allow the ESP01 to connect and communicate with the server over the local network. The setup code looks like the following:\n/* Environment variables */ #define SSID \u0026#34;YourNetwork\u0026#34; #define PASSWORD \u0026#34;NetworkPassword123\u0026#34; /* Globals */ ESP8266WiFiMulti wifi_multi; void setup() { // Set the ESP01 into \u0026#34;STATION\u0026#34; mode WiFi.mode(WIFI_STA); // Add the Wi-Fi connection data wifi_multi.addAP(SSID, PASSWORD); // Try to connect wl_status_t status = wifi_multi.run(); if(status != WL_CONNECTED) { // Error handling code... } } void loop() { // Server communication and sensor measuring code } One common error, which I also made, was the wrong SSID and PASSWORD of the network, so make sure everything is correct. If the setup was successful, HTTP requests can be sent to the server which means we can send the actual weather data. The HTTP request and response part will be covered in a follow up post of the weather station series.\nWhat\u0026rsquo;s the weather outside?\u003e\rWhat\u0026rsquo;s the weather outside? # DHT sensors are, by now, one of the most used sensors in starter or home projects, and therefore have a simple and straightforward code integration with multiple microcontrollers. Make sure you have installed the DHT library in your Arduino IDE by going to Sketch \u0026gt; Include Library \u0026gt; Manage Libraries and search for the DHT sensor library from Adafruit.\nOnce installed, the setup code looks like the following:\n/* Libraries */ #include \u0026lt;DHT.h\u0026gt; /* Sensor configuration variables*/ #define DHT_PIN 2 // The data pin is connected to the ESP01 GPIO2 pin #define DHT_TYPE DHT22 /* Globals */ DHT dht(DHT_PIN, DHT_TYPE); void setup() { // Start the sensor communication dht.begin(); } void loop() { // Let\u0026#39;s give the little fella some breathing room delay(1000); float temperature = dht.readTemperature(); float humidity = dht.readHumidity(); // Wi-Fi and POST request code } And this is the minimum working code example which allows ESP01 to request data from DHT22.\nUpload\u003e\rUpload # After the code is added and the compilation process is successful, the upload process can start. Make sure that the proper board (Generic ESP8266 Module) and communication port are selected, hit the upload button and wait for the upload process to finish.\nConclusion\u003e\rConclusion # This post covers the wiring and sensor data acquisition part which is the essential part for our weather station in order to obtain any environmental data. In the next posts, I will write about the server (design decisions and the code), dockerize the server environment, how to make HTTP requests with ESP01 and store the sensor data into a database.\nIf you’re interested how the full working example looks like, you can have a look here.\nStay tuned and thanks for reading!\n","date":"26 March 2023","permalink":"/posts/weatherstation_part1/","section":"Posts","summary":"As spring is now here, it was time for a new side project.","title":"Weather station - It's alive!"},{"content":"","date":"26 March 2023","permalink":"/tags/weather-station/","section":"Tags","summary":"","title":"weather-station"},{"content":"","date":"23 March 2023","permalink":"/","section":"","summary":"","title":""},{"content":"\rSoftware engineer | Masters degree in CS | Croatia\rWith experience in bringing software solutions to the table, I have mostly worked on projects in both the automotive and medical industries. My passion lies in working with low-level technologies such as C and C++, where I gained most of my experience. I have also developed a keen interest in developing and optimizing build systems, utilizing tools like CMake and Bazel to streamline the development process. Also, love to work on improving CI processes to have the most optimal (resource-wise) workflow. My drive for self-improvement has led me to expand my skill set further, and have also undertaken the task of learning Golang and Rust to expand my \u0026ldquo;digital\u0026rdquo; toolbox which allow me to resolve problems from a different perspective. In my free time, I indulge in my creative side by designing and printing 3D models, creating games and various software solutions with which I am constantly pushing myself to improve both my technical and artistic abilities.\n","date":"1 January 0001","permalink":"/about/","section":"","summary":"Software engineer | Masters degree in CS | Croatia\rWith experience in bringing software solutions to the table, I have mostly worked on projects in both the automotive and medical industries.","title":"About me"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]